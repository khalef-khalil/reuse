/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace ReuseLabel {
  export type CertificateStruct = {
    issuer: AddressLike;
    owner: AddressLike;
    productId: string;
    issueDate: BigNumberish;
    isValid: boolean;
  };

  export type CertificateStructOutput = [
    issuer: string,
    owner: string,
    productId: string,
    issueDate: bigint,
    isValid: boolean
  ] & {
    issuer: string;
    owner: string;
    productId: string;
    issueDate: bigint;
    isValid: boolean;
  };
}

export interface ReuseLabelInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "certificates"
      | "getCertificate"
      | "issueCertificate"
      | "revokeCertificate"
      | "transferCertificate"
      | "verifyCertificate"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CertificateIssued"
      | "CertificateRevoked"
      | "CertificateTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "certificates",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCertificate",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "issueCertificate",
    values: [string, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeCertificate",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferCertificate",
    values: [string, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyCertificate",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "certificates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCertificate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "issueCertificate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeCertificate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferCertificate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyCertificate",
    data: BytesLike
  ): Result;
}

export namespace CertificateIssuedEvent {
  export type InputTuple = [
    productId: string,
    issuer: AddressLike,
    owner: AddressLike,
    issueDate: BigNumberish
  ];
  export type OutputTuple = [
    productId: string,
    issuer: string,
    owner: string,
    issueDate: bigint
  ];
  export interface OutputObject {
    productId: string;
    issuer: string;
    owner: string;
    issueDate: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CertificateRevokedEvent {
  export type InputTuple = [productId: string, issuer: AddressLike];
  export type OutputTuple = [productId: string, issuer: string];
  export interface OutputObject {
    productId: string;
    issuer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CertificateTransferredEvent {
  export type InputTuple = [
    productId: string,
    previousOwner: AddressLike,
    newOwner: AddressLike
  ];
  export type OutputTuple = [
    productId: string,
    previousOwner: string,
    newOwner: string
  ];
  export interface OutputObject {
    productId: string;
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ReuseLabel extends BaseContract {
  connect(runner?: ContractRunner | null): ReuseLabel;
  waitForDeployment(): Promise<this>;

  interface: ReuseLabelInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  certificates: TypedContractMethod<
    [arg0: string],
    [
      [string, string, string, bigint, boolean] & {
        issuer: string;
        owner: string;
        productId: string;
        issueDate: bigint;
        isValid: boolean;
      }
    ],
    "view"
  >;

  getCertificate: TypedContractMethod<
    [productId: string],
    [ReuseLabel.CertificateStructOutput],
    "view"
  >;

  issueCertificate: TypedContractMethod<
    [productId: string, initialOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeCertificate: TypedContractMethod<
    [productId: string],
    [void],
    "nonpayable"
  >;

  transferCertificate: TypedContractMethod<
    [productId: string, newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  verifyCertificate: TypedContractMethod<
    [productId: string],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "certificates"
  ): TypedContractMethod<
    [arg0: string],
    [
      [string, string, string, bigint, boolean] & {
        issuer: string;
        owner: string;
        productId: string;
        issueDate: bigint;
        isValid: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCertificate"
  ): TypedContractMethod<
    [productId: string],
    [ReuseLabel.CertificateStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "issueCertificate"
  ): TypedContractMethod<
    [productId: string, initialOwner: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeCertificate"
  ): TypedContractMethod<[productId: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferCertificate"
  ): TypedContractMethod<
    [productId: string, newOwner: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "verifyCertificate"
  ): TypedContractMethod<[productId: string], [boolean], "view">;

  getEvent(
    key: "CertificateIssued"
  ): TypedContractEvent<
    CertificateIssuedEvent.InputTuple,
    CertificateIssuedEvent.OutputTuple,
    CertificateIssuedEvent.OutputObject
  >;
  getEvent(
    key: "CertificateRevoked"
  ): TypedContractEvent<
    CertificateRevokedEvent.InputTuple,
    CertificateRevokedEvent.OutputTuple,
    CertificateRevokedEvent.OutputObject
  >;
  getEvent(
    key: "CertificateTransferred"
  ): TypedContractEvent<
    CertificateTransferredEvent.InputTuple,
    CertificateTransferredEvent.OutputTuple,
    CertificateTransferredEvent.OutputObject
  >;

  filters: {
    "CertificateIssued(string,address,address,uint256)": TypedContractEvent<
      CertificateIssuedEvent.InputTuple,
      CertificateIssuedEvent.OutputTuple,
      CertificateIssuedEvent.OutputObject
    >;
    CertificateIssued: TypedContractEvent<
      CertificateIssuedEvent.InputTuple,
      CertificateIssuedEvent.OutputTuple,
      CertificateIssuedEvent.OutputObject
    >;

    "CertificateRevoked(string,address)": TypedContractEvent<
      CertificateRevokedEvent.InputTuple,
      CertificateRevokedEvent.OutputTuple,
      CertificateRevokedEvent.OutputObject
    >;
    CertificateRevoked: TypedContractEvent<
      CertificateRevokedEvent.InputTuple,
      CertificateRevokedEvent.OutputTuple,
      CertificateRevokedEvent.OutputObject
    >;

    "CertificateTransferred(string,address,address)": TypedContractEvent<
      CertificateTransferredEvent.InputTuple,
      CertificateTransferredEvent.OutputTuple,
      CertificateTransferredEvent.OutputObject
    >;
    CertificateTransferred: TypedContractEvent<
      CertificateTransferredEvent.InputTuple,
      CertificateTransferredEvent.OutputTuple,
      CertificateTransferredEvent.OutputObject
    >;
  };
}
